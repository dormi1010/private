#include <stdio.h>
#include <stdlib.h>
struct cell {
	int element;
	struct cell *next;
};

struct cell *newlist() {
	struct cell *l = NULL;
	l = (struct cell *)malloc(sizeof(struct cell));
	l->element = -1;
	l->next = NULL;
	return l;
}

struct cell *insert(int x, struct cell *p, struct cell *init) {
	struct cell *q, *r;
	r = (struct cell *)malloc(sizeof(struct cell));
	if (p == NULL) {
		q = init;
		init = r;
	} else {
		q = p->next;
		p->next = r;
	}
	r->element = x;
	r->next = q;
	return(init);
	}

struct cell *delete(struct cell *p, struct cell *init) {
	struct cell *q;
	if (init == NULL) {
		printf("error: list is empty.\n");
		exit(1);
	}
	if (p == NULL) {
		q = init;
		init = init->next;
		free(q);
	} else {
		if (p->next == NULL) {
			printf("error: no element to remove.\n");
			exit(1);
		} else {
			q = p->next;
			p->next = q->next;
			free(q);
			}
		}
	return(init);
}

int find(int x, struct cell *init){
    struct cell *p;
    int i;

    p=init;
    i = 1;
    while(i < x){
        p = p->next;
        i++;
    }
    return(p->next->element);
}

struct cell *next(struct cell *p, struct cell *init){
    return(p->next);
}

struct cell *previus(struct cell *p, struct cell *init){
    struct cell *q;

    q = init;
    while (q->next !=NULL){
        if (q == p){
            return (q);
        }
        q = q->next;
    }
    return (NULL);
}


void printlist(struct cell *init){
	struct cell *p;
	p = init;
printf("{");
	while (p != NULL){
		printf("%d\n", p->element);
		p = p->next;
	}
printf("}\n");
}
		
int main() {
	struct cell *l = newlist();
	insert(2,l,l);
	insert(5,l->next,l);
  printlist(l);
  insert(4,next(l,l),l);
	printlist(l);
  delete(previus(l->next,l),l);
  printf("%d\n",find(2,l));
  printlist(l);

  
  
}
